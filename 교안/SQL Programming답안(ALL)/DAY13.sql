--실전문제① ▶ 가장 간단한 데이터 압축하기----------------------------------------------------------
SELECT --+ ORDERED USE_NL(M2) INDEX(M2 LO_OUT_D_IDXPK)
       M1.OUTBOUND_DATE
      ,SUM(M2.ORDER_QTY) AS SUM_QTY
  FROM LO_OUT_M M1
       JOIN LO_OUT_D M2 ON M2.INVOICE_NO = M1.INVOICE_NO
 WHERE M1.OUTBOUND_DATE BETWEEN TO_DATE(:YYYYMM || '01', 'YYYY-MM-DD') AND  LAST_DAY(:YYYYMM || '01')
 GROUP BY M1.OUTBOUND_DATE
 ORDER BY SUM_QTY DESC;
 
/*MariaDB
SET @YYYYMM = '201909';
SELECT M1.OUTBOUND_DATE
      ,SUM(M2.ORDER_QTY) AS SUM_QTY
  FROM LO_OUT_M M1
       JOIN LO_OUT_D M2 ON M2.INVOICE_NO = M1.INVOICE_NO
 WHERE M1.OUTBOUND_DATE BETWEEN CAST(CONCAT(@YYYYMM, '01') AS DATE) AND LAST_DAY(CONCAT(@YYYYMM, '01'))
 GROUP BY M1.OUTBOUND_DATE
 ORDER BY SUM_QTY DESC;
*/   
----------------------------------------------------------------------------------------------------





--실전문제② ▶ 요일별 출하량 합계 구하기------------------------------------------------------------
--옆으로 나열하기
SELECT SUM(CASE WHEN TO_CHAR(M1.OUTBOUND_DATE, 'D') = 1 THEN M2.ORDER_QTY END) AS SUN --일
      ,SUM(CASE WHEN TO_CHAR(M1.OUTBOUND_DATE, 'D') = 2 THEN M2.ORDER_QTY END) AS MON --월
      ,SUM(CASE WHEN TO_CHAR(M1.OUTBOUND_DATE, 'D') = 3 THEN M2.ORDER_QTY END) AS TUE --화
      ,SUM(CASE WHEN TO_CHAR(M1.OUTBOUND_DATE, 'D') = 4 THEN M2.ORDER_QTY END) AS WED --수
      ,SUM(CASE WHEN TO_CHAR(M1.OUTBOUND_DATE, 'D') = 5 THEN M2.ORDER_QTY END) AS THU --목
      ,SUM(CASE WHEN TO_CHAR(M1.OUTBOUND_DATE, 'D') = 6 THEN M2.ORDER_QTY END) AS FRI --금
      ,SUM(CASE WHEN TO_CHAR(M1.OUTBOUND_DATE, 'D') = 7 THEN M2.ORDER_QTY END) AS SAT --토
  FROM LO_OUT_M M1
       JOIN LO_OUT_D M2 ON M2.INVOICE_NO = M1.INVOICE_NO
 WHERE M1.OUTBOUND_DATE BETWEEN TO_DATE(:YYYYMM || '01', 'YYYY-MM-DD') AND  LAST_DAY(:YYYYMM || '01');


SELECT SUN, MON, TUE, WED, THU, FRI, SAT
  FROM (
        SELECT TO_CHAR(M1.OUTBOUND_DATE, 'D') AS MONTH
              ,SUM(M2.ORDER_QTY) AS ORDER_QTY
          FROM LO_OUT_M M1
               JOIN LO_OUT_D M2 ON M2.INVOICE_NO = M1.INVOICE_NO
         WHERE M1.OUTBOUND_DATE BETWEEN TO_DATE(:YYYYMM || '01', 'YYYY-MM-DD') AND  LAST_DAY(TO_DATE(:YYYYMM || '01', 'YYYY-MM-DD'))
         GROUP BY M1.OUTBOUND_DATE
       )
 PIVOT ( SUM(ORDER_QTY) FOR MONTH IN (1 AS SUN, 2 AS MON, 3 AS TUE, 4 AS WED, 5 AS THU, 6 AS FRI, 7 AS SAT) );


/*MariaDB
SET @YYYYMM = '201909';
SELECT SUM(CASE WHEN DAYOFWEEK(M1.OUTBOUND_DATE) = 1 THEN M2.ORDER_QTY END) AS SUN #일
      ,SUM(CASE WHEN DAYOFWEEK(M1.OUTBOUND_DATE) = 2 THEN M2.ORDER_QTY END) AS MON #월
      ,SUM(CASE WHEN DAYOFWEEK(M1.OUTBOUND_DATE) = 3 THEN M2.ORDER_QTY END) AS TUE #화
      ,SUM(CASE WHEN DAYOFWEEK(M1.OUTBOUND_DATE) = 4 THEN M2.ORDER_QTY END) AS WED #수
      ,SUM(CASE WHEN DAYOFWEEK(M1.OUTBOUND_DATE) = 5 THEN M2.ORDER_QTY END) AS THU #목
      ,SUM(CASE WHEN DAYOFWEEK(M1.OUTBOUND_DATE) = 6 THEN M2.ORDER_QTY END) AS FRI #금
      ,SUM(CASE WHEN DAYOFWEEK(M1.OUTBOUND_DATE) = 7 THEN M2.ORDER_QTY END) AS SAT #토
  FROM LO_OUT_M M1
       JOIN LO_OUT_D M2 ON M2.INVOICE_NO = M1.INVOICE_NO
 WHERE M1.OUTBOUND_DATE BETWEEN CAST(CONCAT(@YYYYMM, '01') AS DATE) AND LAST_DAY(CONCAT(@YYYYMM, '01'))
*/


--아래로 나열하기
SELECT --+ ORDERED USE_NL(M2)
       TO_CHAR(M1.OUTBOUND_DATE, 'DAY') AS DAY
      ,SUM(M2.ORDER_QTY)                AS ORDER_QTY
  FROM LO_OUT_M M1
       JOIN LO_OUT_D M2 ON M2.INVOICE_NO = M1.INVOICE_NO
 WHERE M1.OUTBOUND_DATE BETWEEN TO_DATE(:YYYYMM || '01', 'YYYY-MM-DD') AND  LAST_DAY(:YYYYMM || '01')
 GROUP BY TO_CHAR(M1.OUTBOUND_DATE, 'DAY') 
         ,TO_CHAR(M1.OUTBOUND_DATE, 'D')
 ORDER BY TO_CHAR(M1.OUTBOUND_DATE, 'D');

/*MariaDB
SET @YYYYMM = '201909';
SELECT DAY, ORDER_QTY
  FROM (
        SELECT CONCAT(SUBSTR( _UTF8'일월화수목금토', DAYOFWEEK(M1.OUTBOUND_DATE), 1), '요일') AS DAY
              ,DAYOFWEEK(M1.OUTBOUND_DATE)   AS DAYY
              ,SUM(M2.ORDER_QTY)             AS ORDER_QTY
          FROM LO_OUT_M M1
               JOIN LO_OUT_D M2 ON M2.INVOICE_NO = M1.INVOICE_NO
         WHERE M1.OUTBOUND_DATE BETWEEN CAST(CONCAT(@YYYYMM, '01') AS DATE) AND LAST_DAY(CONCAT(@YYYYMM, '01'))
         GROUP BY CONCAT(SUBSTR( _UTF8'일월화수목금토', DAYOFWEEK(M1.OUTBOUND_DATE), 1), '요일')
                 ,DAYOFWEEK(M1.OUTBOUND_DATE)
         ORDER BY DAYOFWEEK(M1.OUTBOUND_DATE)
       ) L1;    
*/          
----------------------------------------------------------------------------------------------------





--실전문제③ ▶ 월/분기별 출하량 합계 구하기---------------------------------------------------------
SELECT SUM(CASE WHEN TO_CHAR(M1.OUTBOUND_DATE, 'MM') = '01' THEN M2.ORDER_QTY END) AS M01
      ,SUM(CASE WHEN TO_CHAR(M1.OUTBOUND_DATE, 'MM') = '02' THEN M2.ORDER_QTY END) AS M02
      ,SUM(CASE WHEN TO_CHAR(M1.OUTBOUND_DATE, 'MM') = '03' THEN M2.ORDER_QTY END) AS M03
      ,SUM(CASE WHEN TO_CHAR(M1.OUTBOUND_DATE, 'Q')  =   1  THEN M2.ORDER_QTY END) AS Q1
      ,SUM(CASE WHEN TO_CHAR(M1.OUTBOUND_DATE, 'MM') = '04' THEN M2.ORDER_QTY END) AS M04
      ,SUM(CASE WHEN TO_CHAR(M1.OUTBOUND_DATE, 'MM') = '05' THEN M2.ORDER_QTY END) AS M05
      ,SUM(CASE WHEN TO_CHAR(M1.OUTBOUND_DATE, 'MM') = '06' THEN M2.ORDER_QTY END) AS M06
      ,SUM(CASE WHEN TO_CHAR(M1.OUTBOUND_DATE, 'Q')  =   2  THEN M2.ORDER_QTY END) AS Q2
      ,SUM(CASE WHEN TO_CHAR(M1.OUTBOUND_DATE, 'MM') = '07' THEN M2.ORDER_QTY END) AS M07
      ,SUM(CASE WHEN TO_CHAR(M1.OUTBOUND_DATE, 'MM') = '08' THEN M2.ORDER_QTY END) AS M08
      ,SUM(CASE WHEN TO_CHAR(M1.OUTBOUND_DATE, 'MM') = '09' THEN M2.ORDER_QTY END) AS M09
      ,SUM(CASE WHEN TO_CHAR(M1.OUTBOUND_DATE, 'Q')  =   3  THEN M2.ORDER_QTY END) AS Q3
      ,SUM(CASE WHEN TO_CHAR(M1.OUTBOUND_DATE, 'MM') = '10' THEN M2.ORDER_QTY END) AS M10
      ,SUM(CASE WHEN TO_CHAR(M1.OUTBOUND_DATE, 'MM') = '11' THEN M2.ORDER_QTY END) AS M11
      ,SUM(CASE WHEN TO_CHAR(M1.OUTBOUND_DATE, 'MM') = '12' THEN M2.ORDER_QTY END) AS M12
      ,SUM(CASE WHEN TO_CHAR(M1.OUTBOUND_DATE, 'Q')  =   4  THEN M2.ORDER_QTY END) AS Q4
  FROM LO_OUT_M M1
       JOIN LO_OUT_D M2 ON M2.INVOICE_NO = M1.INVOICE_NO
 WHERE M1.OUTBOUND_DATE BETWEEN TO_DATE(:YYYY || '0101', 'YYYY-MM-DD') AND TO_DATE(:YYYY || '1231', 'YYYY-MM-DD');

 
/*MariaDB
SET @YYYY = '2019';
SELECT SUM(CASE WHEN TO_CHAR(M1.OUTBOUND_DATE, 'MM') = '01' THEN M2.ORDER_QTY END) AS M01
      ,SUM(CASE WHEN TO_CHAR(M1.OUTBOUND_DATE, 'MM') = '02' THEN M2.ORDER_QTY END) AS M02
      ,SUM(CASE WHEN TO_CHAR(M1.OUTBOUND_DATE, 'MM') = '03' THEN M2.ORDER_QTY END) AS M03
      ,SUM(CASE WHEN QUARTER(M1.OUTBOUND_DATE)       =   1  THEN M2.ORDER_QTY END) AS Q1
      ,SUM(CASE WHEN TO_CHAR(M1.OUTBOUND_DATE, 'MM') = '04' THEN M2.ORDER_QTY END) AS M04
      ,SUM(CASE WHEN TO_CHAR(M1.OUTBOUND_DATE, 'MM') = '05' THEN M2.ORDER_QTY END) AS M05
      ,SUM(CASE WHEN TO_CHAR(M1.OUTBOUND_DATE, 'MM') = '06' THEN M2.ORDER_QTY END) AS M06
      ,SUM(CASE WHEN QUARTER(M1.OUTBOUND_DATE)       =   2  THEN M2.ORDER_QTY END) AS Q2
      ,SUM(CASE WHEN TO_CHAR(M1.OUTBOUND_DATE, 'MM') = '07' THEN M2.ORDER_QTY END) AS M07
      ,SUM(CASE WHEN TO_CHAR(M1.OUTBOUND_DATE, 'MM') = '08' THEN M2.ORDER_QTY END) AS M08
      ,SUM(CASE WHEN TO_CHAR(M1.OUTBOUND_DATE, 'MM') = '09' THEN M2.ORDER_QTY END) AS M09
      ,SUM(CASE WHEN QUARTER(M1.OUTBOUND_DATE)       =   3  THEN M2.ORDER_QTY END) AS Q3
      ,SUM(CASE WHEN TO_CHAR(M1.OUTBOUND_DATE, 'MM') = '10' THEN M2.ORDER_QTY END) AS M10
      ,SUM(CASE WHEN TO_CHAR(M1.OUTBOUND_DATE, 'MM') = '11' THEN M2.ORDER_QTY END) AS M11
      ,SUM(CASE WHEN TO_CHAR(M1.OUTBOUND_DATE, 'MM') = '12' THEN M2.ORDER_QTY END) AS M12
      ,SUM(CASE WHEN QUARTER(M1.OUTBOUND_DATE)       =   4  THEN M2.ORDER_QTY END) AS Q4
  FROM LO_OUT_M M1
       JOIN LO_OUT_D M2 ON M2.INVOICE_NO = M1.INVOICE_NO
 WHERE M1.OUTBOUND_DATE BETWEEN CONVERT(CONCAT(@YYYY, '0101'), DATE) AND CONVERT(CONCAT(@YYYY, '1231'), DATE);
*/   
 
 
SELECT M01, M02, M03, NVL(M01, 0)+NVL(M02, 0)+NVL(M03, 0) AS Q1
      ,M04, M05, M06, NVL(M04, 0)+NVL(M05, 0)+NVL(M06, 0) AS Q2
      ,M07, M08, M09, NVL(M07, 0)+NVL(M08, 0)+NVL(M09, 0) AS Q3
      ,M10, M11, M12, NVL(M10, 0)+NVL(M11, 0)+NVL(M12, 0) AS Q4
FROM
(
SELECT M01, M02, M03, M04, M05, M06, M07, M08, M09, M10, M11, M12
  FROM (
        SELECT EXTRACT(MONTH FROM OUTBOUND_DATE) AS MONTH
              ,NVL(SUM(ORDER_QTY), 0)            AS ORDER_QTY
          FROM LO_OUT_M M1
               JOIN LO_OUT_D M2 ON M2.INVOICE_NO = M1.INVOICE_NO
         WHERE OUTBOUND_DATE BETWEEN '2019-01-01' AND '2019-12-31'
         GROUP BY EXTRACT(YEAR  FROM OUTBOUND_DATE)
                 ,EXTRACT(MONTH FROM OUTBOUND_DATE)  
       )
 PIVOT ( SUM(ORDER_QTY) FOR MONTH IN (1 AS M01, 2 AS M02, 3 AS M03, 4 AS M04, 5 AS M05, 6 AS M06, 7 AS M07, 8 AS M08, 9 AS M09, 10 AS M10, 11 AS M11, 12 AS M12) )
);
 
 
SELECT YEAR, M01, M02, M03, M04, M05, M06, M07, M08, M09, M10, M11, M12
  FROM (
        SELECT EXTRACT(YEAR  FROM OUTBOUND_DATE) AS YEAR
              ,EXTRACT(MONTH FROM OUTBOUND_DATE) AS MONTH
              ,SUM(ORDER_QTY)                    AS ORDER_QTY
          FROM LO_OUT_M M1
               JOIN LO_OUT_D M2 ON M2.INVOICE_NO = M1.INVOICE_NO
         GROUP BY EXTRACT(YEAR  FROM OUTBOUND_DATE)
                 ,EXTRACT(MONTH FROM OUTBOUND_DATE)  
       )
 PIVOT ( SUM(ORDER_QTY) FOR MONTH IN (1 AS M01, 2 AS M02, 3 AS M03, 4 AS M04, 5 AS M05, 6 AS M06, 7 AS M07, 8 AS M08, 9 AS M09, 10 AS M10, 11 AS M11, 12 AS M12) );
----------------------------------------------------------------------------------------------------





--실전문제④ ▶ 원본 레코드의 일부만 압축하기--------------------------------------------------------
SELECT RNUM, ITEM_CD, ITEM_NM, ORDER_QTY
  FROM (
        SELECT CASE WHEN ROWNUM <= 5 THEN ROWNUM  ELSE 0               END AS RNUM
              ,CASE WHEN ROWNUM <= 5 THEN ITEM_CD ELSE '99999'         END AS ITEM_CD
              ,CASE WHEN ROWNUM <= 5 THEN ITEM_NM ELSE 'TOP5제외 합계' END AS ITEM_NM
              ,SUM(ORDER_QTY)                                              AS ORDER_QTY
          FROM (
                SELECT M2.ITEM_CD
                      ,M2.ITEM_NM
                      ,SUM(M2.ORDER_QTY) AS ORDER_QTY
                  FROM LO_OUT_M M1
                       JOIN LO_OUT_D M2 ON M2.INVOICE_NO = M1.INVOICE_NO
                                       AND M2.ITEM_NM    LIKE '%참치%'
                 WHERE OUTBOUND_DATE BETWEEN '2019-06-01' AND '2019-06-30'
                 GROUP BY M2.ITEM_CD
                         ,M2.ITEM_NM
                 ORDER BY SUM(M2.ORDER_QTY) DESC
               )
         GROUP BY CASE WHEN ROWNUM <= 5 THEN ROWNUM  ELSE 0               END
                 ,CASE WHEN ROWNUM <= 5 THEN ITEM_CD ELSE '99999'         END
                 ,CASE WHEN ROWNUM <= 5 THEN ITEM_NM ELSE 'TOP5제외 합계' END  
       )
 ORDER BY CASE WHEN RNUM BETWEEN 1 AND 5 THEN RNUM ELSE 9999999 END;


/*MariaDB
SET @ROWNUM = 0;
SELECT RNUM, ITEM_CD, ITEM_NM, ORDER_QTY
  FROM (
        SELECT CASE WHEN ROWNUM <= 5 THEN ROWNUM  ELSE 0               END AS RNUM
              ,CASE WHEN ROWNUM <= 5 THEN ITEM_CD ELSE '99999'         END AS ITEM_CD
              ,CASE WHEN ROWNUM <= 5 THEN ITEM_NM ELSE 'TOP5제외 합계' END AS ITEM_NM
              ,SUM(ORDER_QTY)                                              AS ORDER_QTY
          FROM (
                SELECT @ROWNUM := @ROWNUM + 1 AS ROWNUM
																      ,ITEM_CD
																						,ITEM_NM
																						,ORDER_QTY
                  FROM (
								                SELECT M2.ITEM_CD
								                      ,M2.ITEM_NM
								                      ,SUM(M2.ORDER_QTY) AS ORDER_QTY
								                  FROM LO_OUT_M M1
								                       JOIN LO_OUT_D M2 ON M2.INVOICE_NO = M1.INVOICE_NO
								                                       AND M2.ITEM_NM    LIKE '%참치%'
								                 WHERE OUTBOUND_DATE BETWEEN '2019-06-01' AND '2019-06-30'
								                 GROUP BY M2.ITEM_CD
								                         ,M2.ITEM_NM
								                 ORDER BY SUM(M2.ORDER_QTY) DESC
                       ) L1
               ) L2
         GROUP BY CASE WHEN ROWNUM <= 5 THEN ROWNUM  ELSE 0               END
                 ,CASE WHEN ROWNUM <= 5 THEN ITEM_CD ELSE '99999'         END
                 ,CASE WHEN ROWNUM <= 5 THEN ITEM_NM ELSE 'TOP5제외 합계' END  
       ) L3
 ORDER BY CASE WHEN RNUM BETWEEN 1 AND 5 THEN RNUM ELSE 9999999 END;
*/    
----------------------------------------------------------------------------------------------------
